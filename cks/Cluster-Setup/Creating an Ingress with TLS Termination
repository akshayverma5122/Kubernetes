1. deploy the nginx-controller using instruction which is mentioned in nginx-controller file. 

2. Setting Up the Ingress Backend

vi setup.yaml
//
apiVersion: v1
kind: Namespace
metadata:
  name: t75
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: t75
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
         app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.14.2
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: accounting-service
  namespace: t75
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
\\

kubectl create -f setup.yaml 

3. verify deployments, service in t75 namespace.

kubectl get all -n t75

4. Calling the Service endpoint from another Pod. 

kubectl run tmp --image=busybox --restart=Never -it --rm -- wget 10.97.101.228:80

5. Creating the TLS Certificate and Key

openssl req -nodes -new -x509 -keyout accounting.key -out accounting.crt  -subj "/CN=accounting.tls"

6. Creating the TLS-Typed Secret

kubectl create secret tls accounting-secret --cert=accounting.crt --key=accounting.key -n t75

7. Creating the Ingress

kubectl create ingress accounting-ingress --rule="accounting.internal.acme.com/*=accounting-service:80,tls=accounting-secret" -n t75

8. verify the ingress. 

kubectl get ingress -n t75
kubectl describe ingress accounting-ingress -n t75

9. Calling the Ingress

kubectl get nodes -o wide
sudo vim /etc/hosts
192.168.64.91   accounting.internal.acme.com

10. You can now send HTTPS requests to the Ingress using the assigned domain name and receive an HTTP response code 200 in return

 wget -O- https://accounting.internal.acme.com --no-check-certificate


