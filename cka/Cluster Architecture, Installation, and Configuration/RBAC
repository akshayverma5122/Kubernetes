Role Based Access Control (RBAC) :- 
---------------------------------

1. Subject
     A. User
     B. Group
     C. ServiceAccount
2. Resources - Deployment, pods 
3. Verbs - create,delete,update,patch
4. Namespaced
       A. Role
       B. Rolebinding
5. Clusterwide 
       A. ClusterRole
       B. ClusterRoleBinding
6. RBAC aggregation 

Default cluster role 

1. cluster-admin
2. Admin
3. edit
4. view 

################################################# Notes Section ##############################################################
1. user & group is not stored in etcd but serviceaccount will get stored as object in etcd.


#################################### User Creation and kubeconfig file readiness ############################################

User Creation :-
---------------
1. Generate the private key and certificate signing request. 

openssl genrsa -out john.key 2048
openssl req -new -key john.key -out john.csr -subj "/CN=john/O=developer"

2. submit the csr to kubernetes clusters. 

vi john.yaml

apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: john # example
spec:
  request: $(cat john.csr | base64 | tr -d '\n')
  signerName: kubernetes.io/kube-apiserver-client
  expirationSeconds: 86400  
  usages:
  - client auth

kubectl create -f john.yaml

3. Get the csr and approve it.

kubectl get csr	
kubectl certificate approve john

4. Retrieve the certificate for john after approval. 

kubectl get csr john -o jsonpath='{.status.certificate}' | base64 -d  > john.crt

Kubeconfig file preparation for john:-
------------------------------------

1. Embed the user certificate and key in kubeconfig file. 

kubectl --kubeconfig=john.kubeconfig config set-credentials john --client-key=john.key --client-certificate=john.crt --embed-certs=true

2. Embed the cluster endpoint and cluster certificate authority data into kubeconfig file. 

kubectl --kubeconfig=john.kubeconfig config set-cluster dev-cluster --server=https://0.0.0.0:6443
kubectl --kubeconfig=john.kubeconfig config set-cluster dev-cluster --embed-certs=true --certificate-authority=/etc/kubernetes/pki/ca.crt

3. configure the context in kubecofig file. 

kubectl --kubeconfig=john.kubeconfig config set-context dev --cluster=dev-cluster --user=john
kubectl --kubeconfig=john.kubeconfig config use-context dev

Assiging the roles for john user:-
---------------------------------

1. Create the namespace and role.

kubectl create ns devapp
kubectl create role johnrole --verb=get,list,watch,create --resource=pods -n devapp

2. Create the rolebinding for john user. 

kubectl create rolebinding johnrolebinding --role=johnrole --user=john -n devapp

3. Validate the given permission. 

kubectl auth can-i --list --as john
kubectl --kubeconfig=john.kubeconfig auth can-i --list  -n devapp
kubectl --kubeconfig=john.kubeconfig auth can-i create pods  -n devapp





