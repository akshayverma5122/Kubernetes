---
apiVersion: v1
kind: Secret
metadata:
  name: logstash-beats-input
  namespace: elastic-system
type: Opaque
stringData:
  beats-input.conf: |
    input {
      beats {
        port => 5044
      }
    }

    output {
      stdout {
         codec => rubydebug
      }
      if [source_type] == "autodiscover" and [component] == "kube-dns" {
        pipeline {
          send_to => "coredns"
        }
      } else if [source_type] == "autodiscover" and [component] == "kube-apiserver" {
        pipeline {
          send_to => "kubeapiserver"
        }
      } else if [source_type] == "static" {
        pipeline {
          send_to => "logstash-kubernetes-cluster-output-pipeline"
        }
      } else if [source_type] == "autodiscover" and [component] in ["email", "fido", "oaa", "oaa-admin-ui", "oaa-kba", "oaa-policy", "push", "risk", "risk-cc", "sms", "spui", "totp", "yotp", "oaa-mgmt"] {
        pipeline {
          send_to => "oarm-application-logs"  
          }
      }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: logstash-kubernetes-cluster-output-pipeline
  namespace: elastic-system
type: Opaque
stringData:
  logstash-kubernetes-cluster-output-pipeline.conf: |
    input {
      pipeline {
        address => "logstash-kubernetes-cluster-output-pipeline"
      }
    }
    
    output {
      elasticsearch {
        data_stream => true
        data_stream_type => "logs"
        data_stream_dataset => "kubernetes-cluster"
        data_stream_namespace => "default"
        hosts => ["${ELASTICSEARCH_ECK_ELASTICSEARCH_ES_HOSTS}"]
        user => "elastic"
        password => "3ql5g3098OEJcOBr840VPkO9"
        ssl_certificate_authorities => "${ELASTICSEARCH_ECK_ELASTICSEARCH_ES_SSL_CERTIFICATE_AUTHORITY}"
      }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: logstash-kube-apiserver-output
  namespace: elastic-system
type: Opaque
stringData:
  kube-apiserver-output.conf: |
    input {
      pipeline {
        address => kubeapiserver
      }
    }
    
    
    output {
      elasticsearch {
        data_stream => "true"
        data_stream_type => "logs"
        data_stream_dataset => "kubernetes.kube-apiserver"
        data_stream_namespace => "default"
        hosts => ["${ELASTICSEARCH_ECK_ELASTICSEARCH_ES_HOSTS}"]
        user => "elastic"
        password => "3ql5g3098OEJcOBr840VPkO9"
        ssl_certificate_authorities => "${ELASTICSEARCH_ECK_ELASTICSEARCH_ES_SSL_CERTIFICATE_AUTHORITY}"
      }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: logstash-coredns-output
  namespace: elastic-system
type: Opaque
stringData:
  coredns-output.conf: |
    input {
      pipeline {
        address => coredns
      }
    }
    
    filter {
      grok {
        match => {
          "message" => "[%{LOGLEVEL:log.level}] %{IP:client.ip}:%{INT:client.port} - %{INT:dns.id} \"%{WORD:dns.question.type} IN %{HOSTNAME:dns.query.name} %{WORD:dns.protocol} %{INT:dns.size} %{WORD:dns.do} %{INT:dns.bufsize}\" %{WORD:dns.rcode} %{DATA:dns.flags} %{INT:dns.resp_size} %{NUMBER:dns.latency:float}s"
        }
        tag_on_failure => ["_grokparsefailure"]
      }
    }
    
    output {
      elasticsearch {
        data_stream => "true"
        data_stream_type => "logs"
        data_stream_dataset => "kubernetes.coredns"
        data_stream_namespace => "default"
        hosts => ["${ELASTICSEARCH_ECK_ELASTICSEARCH_ES_HOSTS}"]
        user => "elastic"
        password => "3ql5g3098OEJcOBr840VPkO9"
        ssl_certificate_authorities => "${ELASTICSEARCH_ECK_ELASTICSEARCH_ES_SSL_CERTIFICATE_AUTHORITY}"
      }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: oarm-application-logs 
  namespace: elastic-system
type: Opaque
stringData:
  oarm-application-logs.conf: |
    input {
      pipeline {
        address => "oarm-application-logs"
      }
    }
    
    output {
      elasticsearch {
        data_stream => true
        data_stream_type => "logs"
        data_stream_dataset => "oarm-application"
        data_stream_namespace => "default"
        hosts => ["${ELASTICSEARCH_ECK_ELASTICSEARCH_ES_HOSTS}"]
        user => "elastic"
        password => "3ql5g3098OEJcOBr840VPkO9"
        ssl_certificate_authorities => "${ELASTICSEARCH_ECK_ELASTICSEARCH_ES_SSL_CERTIFICATE_AUTHORITY}"
      }

    }

