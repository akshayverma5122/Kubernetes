apiVersion: v1
kind: Secret
metadata:
  name: logstash-customize-pipeline
  namespace: elastic-system
stringData:
  pipelines.yml: |-

    ####################################### coredns pipeline start from here #############################################################

    - pipeline.id: coredns-pipeline
      config.string: |
        input {
          beats {
            port => 5044
          }
        }

        filter {
          if [component] == "coredns" and [message] {
            mutate {
              add_field => { "component" => "coredns" }
            }

            grok {
              match => {
                "message" => "\[%{LOGLEVEL:log.level}\] %{IP:client.ip}:%{INT:client.port} - %{INT:dns.id} \"%{WORD:dns.question.type} IN %{HOSTNAME:dns.query.name} %{WORD:dns.protocol} %{INT:dns.size} %{WORD:dns.do} %{INT:dns.bufsize}\" %{WORD:dns.rcode} %{DATA:dns.flags} %{INT:dns.resp_size} %{NUMBER:dns.latency:float}s"
              }
              remove_field => ["message"]
              tag_on_failure => ["_grokparsefailure"]
            }

            if "_grokparsefailure" in [tags] {
              drop { }
            }
          }
        }

        output {
          elasticsearch {
            data_stream => "true"
            data_stream_type => "logs"
            data_stream_dataset => "kubernetes.coredns"
            data_stream_namespace => "default"
            hosts => ["${ELASTICSEARCH_CLUSTER_ES_HOSTS}"]
            user => "${ELASTICSEARCH_CLUSTER_ES_USER}"
            password => "${ELASTICSEARCH_CLUSTER_ES_PASSWORD}"
            ssl_certificate_authorities => "${ELASTICSEARCH_CLUSTER_ES_SSL_CERTIFICATE_AUTHORITY}"
          }
        }

    ####################################### kube-apiserver pipeline start from here #############################################################

    - pipeline.id: kube-apiserver-pipeline
      config.string: |
        input {
          beats {
            port => 5044
          }
        }

        filter {
          if [component] == "kube-apiserver" and [message] {
            json {
              source => "message"
              skip_on_invalid_json => true
            }

            grok {
              match => {
                "msg" => "Trace\\[%{INT:trace_id}\\]:\\s+\\\"%{WORD:verb}\\\"%{GREEDYDATA:trace_details}"
              }
              tag_on_failure => ["_grokparsefailure"]
            }

            mutate {
              add_field => {
                "event.dataset" => "kubernetes.kube-apiserver"
              }
            }

            if "_grokparsefailure" in [tags] {
              drop { }
            }
          } else {
            drop { }
          }
        }

        output {
          elasticsearch {
            data_stream => "true"
            data_stream_type => "logs"
            data_stream_dataset => "kubernetes.kube-apiserver"
            data_stream_namespace => "default"
            hosts => ["${ELASTICSEARCH_CLUSTER_ES_HOSTS}"]
            user => "${ELASTICSEARCH_CLUSTER_ES_USER}"
            password => "${ELASTICSEARCH_CLUSTER_ES_PASSWORD}"
            ssl_certificate_authorities => "${ELASTICSEARCH_CLUSTER_ES_SSL_CERTIFICATE_AUTHORITY}"
          }
        }

